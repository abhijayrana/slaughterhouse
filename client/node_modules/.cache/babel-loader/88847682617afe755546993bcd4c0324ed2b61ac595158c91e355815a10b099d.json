{"ast":null,"code":"var _jsxFileName = \"/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx\";\nimport React from \"react\";\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadSpreadsheet = () => {\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      const programs = data.map(row => ({\n        name: row[\"Name\"],\n        organization: row[\"Organization\"],\n        description: row[\"Description\"],\n        field: JSON.parse(row[\"Field\"]),\n        eligibility: row[\"Eligibility\"],\n        type: row[\"Type\"],\n        cost: row[\"Cost\"],\n        location: row[\"Location\"],\n        virtual: row[\"Virtual\"] === \"TRUE\",\n        // Converts \"TRUE\" or \"FALSE\" to boolean\n        startDate: row[\"Start Date\"],\n        endDate: row[\"End Date\"],\n        website: row[\"Website\"],\n        applicationDeadline: row[\"Application Deadline\"]\n      }));\n\n      // Send to backend\n      fetch(\"/api/upload-programs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          programs\n        })\n      }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx,.xls\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c = UploadSpreadsheet;\nexport default UploadSpreadsheet;\nvar _c;\n$RefreshReg$(_c, \"UploadSpreadsheet\");","map":{"version":3,"names":["React","XLSX","jsxDEV","_jsxDEV","UploadSpreadsheet","handleFileChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","programs","map","row","name","organization","description","field","JSON","parse","eligibility","cost","location","virtual","startDate","endDate","website","applicationDeadline","fetch","method","headers","body","stringify","then","res","json","console","log","catch","err","error","readAsBinaryString","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx"],"sourcesContent":["import React from \"react\";\nimport XLSX from \"xlsx\";\n\nconst UploadSpreadsheet = () => {\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      const programs = data.map((row) => ({\n        name: row[\"Name\"],\n        organization: row[\"Organization\"],\n        description: row[\"Description\"],\n        field: JSON.parse(row[\"Field\"]),\n        eligibility: row[\"Eligibility\"],\n        type: row[\"Type\"],\n        cost: row[\"Cost\"],\n        location: row[\"Location\"],\n        virtual: row[\"Virtual\"] === \"TRUE\",  // Converts \"TRUE\" or \"FALSE\" to boolean\n        startDate: row[\"Start Date\"],\n        endDate: row[\"End Date\"],\n        website: row[\"Website\"],\n        applicationDeadline: row[\"Application Deadline\"],\n      }));\n      \n      // Send to backend\n      fetch(\"/api/upload-programs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ programs }),\n      })\n      .then((res) => res.json())\n      .then((data) => console.log(data))\n      .catch((err) => console.error(err));\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileChange} />\n    </div>\n  );\n};\n\nexport default UploadSpreadsheet;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,GAAG,IAAK;MACvB,MAAMC,IAAI,GAAGD,GAAG,CAACL,MAAM,CAACO,MAAM;MAC9B,MAAMC,EAAE,GAAGf,IAAI,CAACgB,IAAI,CAACH,IAAI,EAAE;QAAEI,IAAI,EAAE;MAAS,CAAC,CAAC;MAC9C,MAAMC,MAAM,GAAGH,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC;MAC/B,MAAMC,EAAE,GAAGL,EAAE,CAACM,MAAM,CAACH,MAAM,CAAC;MAC5B,MAAMI,IAAI,GAAGtB,IAAI,CAACuB,KAAK,CAACC,aAAa,CAACJ,EAAE,CAAC;MACzC,MAAMK,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAAEC,GAAG,KAAM;QAClCC,IAAI,EAAED,GAAG,CAAC,MAAM,CAAC;QACjBE,YAAY,EAAEF,GAAG,CAAC,cAAc,CAAC;QACjCG,WAAW,EAAEH,GAAG,CAAC,aAAa,CAAC;QAC/BI,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACN,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/BO,WAAW,EAAEP,GAAG,CAAC,aAAa,CAAC;QAC/BV,IAAI,EAAEU,GAAG,CAAC,MAAM,CAAC;QACjBQ,IAAI,EAAER,GAAG,CAAC,MAAM,CAAC;QACjBS,QAAQ,EAAET,GAAG,CAAC,UAAU,CAAC;QACzBU,OAAO,EAAEV,GAAG,CAAC,SAAS,CAAC,KAAK,MAAM;QAAG;QACrCW,SAAS,EAAEX,GAAG,CAAC,YAAY,CAAC;QAC5BY,OAAO,EAAEZ,GAAG,CAAC,UAAU,CAAC;QACxBa,OAAO,EAAEb,GAAG,CAAC,SAAS,CAAC;QACvBc,mBAAmB,EAAEd,GAAG,CAAC,sBAAsB;MACjD,CAAC,CAAC,CAAC;;MAEH;MACAe,KAAK,CAAC,sBAAsB,EAAE;QAC5BC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC;UAAErB;QAAS,CAAC;MACnC,CAAC,CAAC,CACDsB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEzB,IAAI,IAAK4B,OAAO,CAACC,GAAG,CAAC7B,IAAI,CAAC,CAAC,CACjC8B,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;IACrC,CAAC;IACD5C,MAAM,CAAC8C,kBAAkB,CAACjD,IAAI,CAAC;EACjC,CAAC;EAED,oBACEJ,OAAA;IAAAsD,QAAA,eACEtD,OAAA;MAAOe,IAAI,EAAC,MAAM;MAACwC,MAAM,EAAC,YAAY;MAACC,QAAQ,EAAEtD;IAAiB;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV,CAAC;AAACC,EAAA,GA9CI5D,iBAAiB;AAgDvB,eAAeA,iBAAiB;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}