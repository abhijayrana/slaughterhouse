{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Papa from \"papaparse\";\nconst ExcelUpload = () => {\n  const onDrop = acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      Papa.parse(file, {\n        complete: result => {\n          // Process your data here\n          const programs = result.data.map(row => ({\n            name: row[0],\n            organization: row[1],\n            description: row[2],\n            field: row[3],\n            eligibility: row[4],\n            type: row[5],\n            cost: row[6],\n            location: row[7],\n            virtual: row[8],\n            startDate: row[9],\n            endDate: row[10],\n            website: row[11],\n            applicationDeadline: row[12]\n          }));\n\n          // Send to backend\n          fetch(\"/api/upload-programs\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              programs\n            })\n          }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n        }\n      });\n    });\n  };\n\n  //const { getRootProps, getInputProps, setOnDrop } = useDropzone();\n\n  //   useEffect(() => {\n  //     setOnDrop(onDrop);\n  //   }, [onDrop]);\n\n  //   return (\n  //     <div {...getRootProps()}>\n  //       <input {...getInputProps()} />\n  //       <p>Drag 'n' drop some files here, or click to select files</p>\n  //     </div>\n  //   );\n};\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","useEffect","useDropzone","Papa","ExcelUpload","onDrop","acceptedFiles","forEach","file","parse","complete","result","programs","data","map","row","name","organization","description","field","eligibility","type","cost","location","virtual","startDate","endDate","website","applicationDeadline","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","catch","err","error","_c","$RefreshReg$"],"sources":["/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Papa from \"papaparse\";\n\nconst ExcelUpload = () => {\n\n  const onDrop = (acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      Papa.parse(file, {\n        complete: (result) => {\n          // Process your data here\n          const programs = result.data.map((row) => ({\n            name: row[0],\n            organization: row[1],\n            description: row[2],\n            field: row[3],\n            eligibility: row[4],\n            type: row[5],\n            cost: row[6],\n            location: row[7],\n            virtual: row[8],\n            startDate: row[9],\n            endDate: row[10],\n            website: row[11],\n            applicationDeadline: row[12],\n          }));\n\n          // Send to backend\n          fetch(\"/api/upload-programs\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ programs }),\n          })\n          .then((res) => res.json())\n          .then((data) => console.log(data))\n          .catch((err) => console.error(err));\n        },\n      });\n    });\n  };\n\n  //const { getRootProps, getInputProps, setOnDrop } = useDropzone();\n\n//   useEffect(() => {\n//     setOnDrop(onDrop);\n//   }, [onDrop]);\n\n//   return (\n//     <div {...getRootProps()}>\n//       <input {...getInputProps()} />\n//       <p>Drag 'n' drop some files here, or click to select files</p>\n//     </div>\n//   );\n};\n\nexport default ExcelUpload;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,IAAI,MAAM,WAAW;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAExB,MAAMC,MAAM,GAAIC,aAAa,IAAK;IAChCA,aAAa,CAACC,OAAO,CAAEC,IAAI,IAAK;MAC9BL,IAAI,CAACM,KAAK,CAACD,IAAI,EAAE;QACfE,QAAQ,EAAGC,MAAM,IAAK;UACpB;UACA,MAAMC,QAAQ,GAAGD,MAAM,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;YACzCC,IAAI,EAAED,GAAG,CAAC,CAAC,CAAC;YACZE,YAAY,EAAEF,GAAG,CAAC,CAAC,CAAC;YACpBG,WAAW,EAAEH,GAAG,CAAC,CAAC,CAAC;YACnBI,KAAK,EAAEJ,GAAG,CAAC,CAAC,CAAC;YACbK,WAAW,EAAEL,GAAG,CAAC,CAAC,CAAC;YACnBM,IAAI,EAAEN,GAAG,CAAC,CAAC,CAAC;YACZO,IAAI,EAAEP,GAAG,CAAC,CAAC,CAAC;YACZQ,QAAQ,EAAER,GAAG,CAAC,CAAC,CAAC;YAChBS,OAAO,EAAET,GAAG,CAAC,CAAC,CAAC;YACfU,SAAS,EAAEV,GAAG,CAAC,CAAC,CAAC;YACjBW,OAAO,EAAEX,GAAG,CAAC,EAAE,CAAC;YAChBY,OAAO,EAAEZ,GAAG,CAAC,EAAE,CAAC;YAChBa,mBAAmB,EAAEb,GAAG,CAAC,EAAE;UAC7B,CAAC,CAAC,CAAC;;UAEH;UACAc,KAAK,CAAC,sBAAsB,EAAE;YAC5BC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEtB;YAAS,CAAC;UACnC,CAAC,CAAC,CACDuB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEtB,IAAI,IAAKyB,OAAO,CAACC,GAAG,CAAC1B,IAAI,CAAC,CAAC,CACjC2B,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;QACrC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;;EAEF;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC;AAACE,EAAA,GAnDIvC,WAAW;AAqDjB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}