{"ast":null,"code":"var _jsxFileName = \"/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelUpload = () => {\n  _s();\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        Papa.parse(file, {\n          complete: result => {\n            const programs = result.data.map(row => ({\n              name: row[0],\n              organization: row[1],\n              description: row[2],\n              field: row[3],\n              eligibility: row[4],\n              type: row[5],\n              cost: row[6],\n              location: row[7],\n              virtual: row[8],\n              startDate: row[9],\n              endDate: row[10],\n              website: row[11],\n              applicationDeadline: row[12]\n            }));\n            fetch(\"/api/upload-programs\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                programs\n              })\n            }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n          }\n        });\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelUpload, \"a6n/8sU/3Si3hjIh3DKgs8O3D8A=\", false, function () {\n  return [useDropzone];\n});\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","useDropzone","Papa","jsxDEV","_jsxDEV","ExcelUpload","_s","getRootProps","getInputProps","onDrop","acceptedFiles","forEach","file","parse","complete","result","programs","data","map","row","name","organization","description","field","eligibility","type","cost","location","virtual","startDate","endDate","website","applicationDeadline","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx"],"sourcesContent":["import React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Papa from \"papaparse\";\n\nconst ExcelUpload = () => {\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: (acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        Papa.parse(file, {\n          complete: (result) => {\n            const programs = result.data.map((row) => ({\n                name: row[0],\n                organization: row[1],\n                description: row[2],\n                field: row[3],\n                eligibility: row[4],\n                type: row[5],\n                cost: row[6],\n                location: row[7],\n                virtual: row[8],\n                startDate: row[9],\n                endDate: row[10],\n                website: row[11],\n                applicationDeadline: row[12],\n              }));\n            fetch(\"/api/upload-programs\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({ programs }),\n            })\n              .then((res) => res.json())\n              .then((data) => console.log(data))\n              .catch((err) => console.error(err));\n          },\n        });\n      });\n    },\n  });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>Drag 'n' drop some files here, or click to select files</p>\n    </div>\n  );\n};\n\nexport default ExcelUpload;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGP,WAAW,CAAC;IAClDQ,MAAM,EAAGC,aAAa,IAAK;MACzBA,aAAa,CAACC,OAAO,CAAEC,IAAI,IAAK;QAC9BV,IAAI,CAACW,KAAK,CAACD,IAAI,EAAE;UACfE,QAAQ,EAAGC,MAAM,IAAK;YACpB,MAAMC,QAAQ,GAAGD,MAAM,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;cACvCC,IAAI,EAAED,GAAG,CAAC,CAAC,CAAC;cACZE,YAAY,EAAEF,GAAG,CAAC,CAAC,CAAC;cACpBG,WAAW,EAAEH,GAAG,CAAC,CAAC,CAAC;cACnBI,KAAK,EAAEJ,GAAG,CAAC,CAAC,CAAC;cACbK,WAAW,EAAEL,GAAG,CAAC,CAAC,CAAC;cACnBM,IAAI,EAAEN,GAAG,CAAC,CAAC,CAAC;cACZO,IAAI,EAAEP,GAAG,CAAC,CAAC,CAAC;cACZQ,QAAQ,EAAER,GAAG,CAAC,CAAC,CAAC;cAChBS,OAAO,EAAET,GAAG,CAAC,CAAC,CAAC;cACfU,SAAS,EAAEV,GAAG,CAAC,CAAC,CAAC;cACjBW,OAAO,EAAEX,GAAG,CAAC,EAAE,CAAC;cAChBY,OAAO,EAAEZ,GAAG,CAAC,EAAE,CAAC;cAChBa,mBAAmB,EAAEb,GAAG,CAAC,EAAE;YAC7B,CAAC,CAAC,CAAC;YACLc,KAAK,CAAC,sBAAsB,EAAE;cAC5BC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACP,cAAc,EAAE;cAClB,CAAC;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEtB;cAAS,CAAC;YACnC,CAAC,CAAC,CACCuB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEtB,IAAI,IAAKyB,OAAO,CAACC,GAAG,CAAC1B,IAAI,CAAC,CAAC,CACjC2B,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;UACvC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,oBACEzC,OAAA;IAAA,GAASG,YAAY,CAAC,CAAC;IAAAwC,QAAA,gBACrB3C,OAAA;MAAA,GAAWI,aAAa,CAAC;IAAC;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9B/C,OAAA;MAAA2C,QAAA,EAAG;IAAuD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA3CID,WAAW;EAAA,QACyBJ,WAAW;AAAA;AAAAmD,EAAA,GAD/C/C,WAAW;AA6CjB,eAAeA,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}