{"ast":null,"code":"var _jsxFileName = \"/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx\";\nimport React from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelUpload = () => {\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const rawData = XLSX.utils.sheet_to_json(worksheet);\n      const programs = rawData.map(row => ({\n        name: row['Name'],\n        organization: row['Organization'],\n        description: row['Description'],\n        field: row['Field'],\n        eligibility: {\n          age: row['Eligibility Age'],\n          year: row['Eligibility Year']\n        },\n        type: row['Type'],\n        cost: row['Cost'],\n        location: row['Location'],\n        virtual: row['Virtual'],\n        startDate: new Date(row['Start Date']),\n        endDate: new Date(row['End Date']),\n        website: row['Website'],\n        applicationDeadline: new Date(row['Application Deadline'])\n      }));\n      // Send to backend\n      fetch('/api/upload-programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          programs\n        })\n      }).then(response => response.json()).then(data => console.log(data));\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","XLSX","jsxDEV","_jsxDEV","ExcelUpload","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","rawData","utils","sheet_to_json","programs","map","row","name","organization","description","field","eligibility","age","year","cost","location","virtual","startDate","Date","endDate","website","applicationDeadline","fetch","method","headers","body","JSON","stringify","then","response","json","console","log","readAsArrayBuffer","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx"],"sourcesContent":["import React from 'react';\nimport * as XLSX from 'xlsx';\n\nconst ExcelUpload = () => {\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const rawData = XLSX.utils.sheet_to_json(worksheet);\n      const programs = rawData.map(row => ({\n        name: row['Name'],\n        organization: row['Organization'],\n        description: row['Description'],\n        field: row['Field'],\n        eligibility: {\n          age: row['Eligibility Age'],\n          year: row['Eligibility Year']\n        },\n        type: row['Type'],\n        cost: row['Cost'],\n        location: row['Location'],\n        virtual: row['Virtual'],\n        startDate: new Date(row['Start Date']),\n        endDate: new Date(row['End Date']),\n        website: row['Website'],\n        applicationDeadline: new Date(row['Application Deadline'])\n      }));\n      // Send to backend\n      fetch('/api/upload-programs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ programs }),\n      })\n      .then((response) => response.json())\n      .then((data) => console.log(data));\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileUpload} />\n    </div>\n  );\n};\n\nexport default ExcelUpload;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,KAAK,CAACL,MAAM,CAACQ,MAAM,CAAC;MAChD,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;MACxC,MAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;MAC5C,MAAMI,OAAO,GAAGvB,IAAI,CAACwB,KAAK,CAACC,aAAa,CAACJ,SAAS,CAAC;MACnD,MAAMK,QAAQ,GAAGH,OAAO,CAACI,GAAG,CAACC,GAAG,KAAK;QACnCC,IAAI,EAAED,GAAG,CAAC,MAAM,CAAC;QACjBE,YAAY,EAAEF,GAAG,CAAC,cAAc,CAAC;QACjCG,WAAW,EAAEH,GAAG,CAAC,aAAa,CAAC;QAC/BI,KAAK,EAAEJ,GAAG,CAAC,OAAO,CAAC;QACnBK,WAAW,EAAE;UACXC,GAAG,EAAEN,GAAG,CAAC,iBAAiB,CAAC;UAC3BO,IAAI,EAAEP,GAAG,CAAC,kBAAkB;QAC9B,CAAC;QACDV,IAAI,EAAEU,GAAG,CAAC,MAAM,CAAC;QACjBQ,IAAI,EAAER,GAAG,CAAC,MAAM,CAAC;QACjBS,QAAQ,EAAET,GAAG,CAAC,UAAU,CAAC;QACzBU,OAAO,EAAEV,GAAG,CAAC,SAAS,CAAC;QACvBW,SAAS,EAAE,IAAIC,IAAI,CAACZ,GAAG,CAAC,YAAY,CAAC,CAAC;QACtCa,OAAO,EAAE,IAAID,IAAI,CAACZ,GAAG,CAAC,UAAU,CAAC,CAAC;QAClCc,OAAO,EAAEd,GAAG,CAAC,SAAS,CAAC;QACvBe,mBAAmB,EAAE,IAAIH,IAAI,CAACZ,GAAG,CAAC,sBAAsB,CAAC;MAC3D,CAAC,CAAC,CAAC;MACH;MACAgB,KAAK,CAAC,sBAAsB,EAAE;QAC5BC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEvB;QAAS,CAAC;MACnC,CAAC,CAAC,CACDwB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAErC,IAAI,IAAKwC,OAAO,CAACC,GAAG,CAACzC,IAAI,CAAC,CAAC;IACpC,CAAC;IACDJ,MAAM,CAAC8C,iBAAiB,CAACjD,IAAI,CAAC;EAChC,CAAC;EAED,oBACEJ,OAAA;IAAAsD,QAAA,eACEtD,OAAA;MAAOgB,IAAI,EAAC,MAAM;MAACuC,QAAQ,EAAErD;IAAiB;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACC,EAAA,GA/CI3D,WAAW;AAiDjB,eAAeA,WAAW;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}