{"ast":null,"code":"var _jsxFileName = \"/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadSpreadsheet = () => {\n  _s();\n  const [programs, setPrograms] = useState([]);\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      const parsedPrograms = data.map(row => ({\n        name: row[\"Name\"],\n        organization: row[\"Organization\"],\n        description: row[\"Description\"],\n        field: JSON.parse(row[\"Field\"]),\n        eligibility: JSON.parse(row[\"Eligibility\"]).map(Number),\n        type: row[\"Type\"],\n        cost: parseInt(row[\"Cost\"], 10),\n        salary: parseInt(row[\"Salary\"], 10),\n        location: row[\"Location\"],\n        virtual: row[\"Virtual\"] === \"yes\",\n        website: row[\"Website\"],\n        startDate: new Date((row[\"StartDate\"] - 25569) * 86400 * 1000),\n        endDate: new Date((row[\"EndDate\"] - 25569) * 86400 * 1000)\n      }));\n      setPrograms(parsedPrograms);\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleSubmit = () => {\n    fetch(\"/api/upload-programs\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        programs\n      })\n    }).then(res => res.json()).then(data => console.log(data)).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx,.xls\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: programs.map((program, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: program.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadSpreadsheet, \"qzPaa9LGkRi6dNnADPJyu9c/it8=\");\n_c = UploadSpreadsheet;\nexport default UploadSpreadsheet;\nvar _c;\n$RefreshReg$(_c, \"UploadSpreadsheet\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","UploadSpreadsheet","_s","programs","setPrograms","handleFileChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","parsedPrograms","map","row","name","organization","description","field","JSON","parse","eligibility","Number","cost","parseInt","salary","location","virtual","website","startDate","Date","endDate","readAsBinaryString","handleSubmit","fetch","method","headers","body","stringify","then","res","json","console","log","catch","err","error","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","program","index","_c","$RefreshReg$"],"sources":["/Users/abhijayrana/slaughterhouse/client/src/components/pages/admin/UploadSpreadsheet.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\n\nconst UploadSpreadsheet = () => {\n  const [programs, setPrograms] = useState([]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      const parsedPrograms = data.map((row) => ({\n        name: row[\"Name\"],\n        organization: row[\"Organization\"],\n        description: row[\"Description\"],\n        field: JSON.parse(row[\"Field\"]),\n        eligibility: JSON.parse(row[\"Eligibility\"]).map(Number),\n        type: row[\"Type\"],\n        cost: parseInt(row[\"Cost\"], 10),\n        salary: parseInt(row[\"Salary\"], 10),\n        location: row[\"Location\"],\n        virtual: row[\"Virtual\"] === \"yes\",\n        website: row[\"Website\"],\n        startDate: new Date((row[\"StartDate\"] - 25569) * 86400 * 1000),\n        endDate: new Date((row[\"EndDate\"] - 25569) * 86400 * 1000),\n      }));\n      setPrograms(parsedPrograms);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  const handleSubmit = () => {\n    fetch(\"/api/upload-programs\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ programs }),\n    })\n    .then((res) => res.json())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileChange} />\n      <button onClick={handleSubmit}>Submit</button>\n      <ul>\n        {programs.map((program, index) => (\n          <li key={index}>{program.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UploadSpreadsheet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}